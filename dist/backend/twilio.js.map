{"version":3,"sources":["twilio.ts"],"names":["debug","DEBUG","debugMessages","sub","debugHttp","debugWebhook","debugHttpOut","TwilioService","constructor","bp","initialize","config","getModuleConfig","router","http","createRouterForBot","checkAuthentication","enableJsonBodyParser","getPublicPath","then","publicPath","indexOf","logger","warn","info","replace","post","_handleIncomingMessage","bind","events","registerMiddleware","description","direction","handler","_handleOutgoingEvent","name","order","mountBot","botId","getModuleConfigForBot","enabled","authToken","forBot","error","client","TwilioClient","mountedBots","push","fromNumber","unmountBot","_","remove","x","getTwilioClientByBotId","entry","find","Error","req","res","body","status","send","To","toNumber","From","bot","undefined","Latitude","_sendEvent","text","Longitude","type","Body","senderId","message","args","sendEvent","IO","Event","channel","payload","preview","target","event","next","messageType","twilio","sendTextMessage","quick_replies","str","count","reply","title","location","getConfig","action","accountSID","messages","create","from","persistentAction","to","catch"],"mappings":"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","sourceRoot":"/Applications/MAMP/htdocs/botpress-master/modules/channel-twilio/src/backend","sourcesContent":["import axios, { AxiosInstance } from 'axios'\nimport * as sdk from 'botpress/sdk'\nimport crypto from 'crypto'\nimport { json as expressJson, Router } from 'express'\nimport _ from 'lodash'\nimport twilio from 'twilio'\n\nimport { Config } from '../config'\n\nconst debug = DEBUG('channel-twilio')\nconst debugMessages = debug.sub('messages')\nconst debugHttp = debug.sub('http')\nconst debugWebhook = debugHttp.sub('webhook')\nconst debugHttpOut = debugHttp.sub('out')\n\n// const outgoingTypes = ['text', 'typing', 'login_prompt', 'carousel']\n// type TwilioAction = 'typing_on' | 'typing_off' | 'mark_seen'\n\ntype MountedBot = { fromNumber: string; botId: string; client: TwilioClient }\n\nexport class TwilioService {\n  private mountedBots: MountedBot[] = []\n  private router: Router & sdk.http.RouterExtension\n  private authToken: string\n  private accountSID: string\n\n  constructor(private bp: typeof sdk) {}\n\n  async initialize() {\n    const config = (await this.bp.config.getModuleConfig('channel-twilio')) as Config\n\n    // if (!config.authToken || !config.authToken.length) {\n    //   throw new Error('You need to set a non-empty value for \"authToken\" in data/global/config/channel-twilio.json')\n    // }\n\n    // if (!config.accountSID || !config.accountSID.length) {\n    //   throw new Error(`You need to set a non-empty value for \"accountSID\" in data/global/config/channel-twilio.json`)\n    // }\n\n    // this.authToken = config.authToken\n    // this.accountSID = config.accountSID\n\n    this.router = this.bp.http.createRouterForBot('channel-twilio', {\n      checkAuthentication: false,\n      enableJsonBodyParser: false // we use our custom json body parser instead, see below\n    })\n\n    // tslint:disable-next-line: no-floating-promises\n    this.router.getPublicPath().then(publicPath => {\n      if (publicPath.indexOf('https://') !== 0) {\n        this.bp.logger.warn('Twilio requires HTTPS to be setup to work properly. See EXTERNAL_URL botpress config.')\n      }\n\n      this.bp.logger.info(`Twilio Webhook URL is ${publicPath.replace('BOT_ID', '___')}/webhook`)\n    })\n\n    // this.router.get('/webhook', this._setupWebhook.bind(this))\n    this.router.post('/webhook', this._handleIncomingMessage.bind(this))\n\n    this.bp.events.registerMiddleware({\n      description: 'Sends outgoing messages for the twilio channel',\n      direction: 'outgoing',\n      handler: this._handleOutgoingEvent.bind(this),\n      name: 'twilio.sendMessages',\n      order: 200\n    })\n  }\n\n  async mountBot(botId: string) {\n    const config = (await this.bp.config.getModuleConfigForBot('channel-twilio', botId)) as Config\n    if (config.enabled) {\n      if (!config.authToken) {\n        return this.bp.logger\n          .forBot(botId)\n          .error('You need to configure an Access Token to enable it. Twilio Channel is disabled for this bot.')\n      }\n      const client = new TwilioClient(botId, this.bp)\n      this.mountedBots.push({ fromNumber: config.fromNumber, botId: botId, client })\n    }\n  }\n\n  async unmountBot(botId: string) {\n    this.mountedBots = _.remove(this.mountedBots, x => x.botId === botId)\n  }\n\n  getTwilioClientByBotId(botId: string): TwilioClient {\n    const entry = _.find(this.mountedBots, x => x.botId === botId)\n\n    if (!entry) {\n      throw new Error(`Can't find a TwilioClient for bot \"${botId}\"`)\n    }\n\n    return entry.client\n  }\n\n  private async _handleIncomingMessage(req, res) {\n    const body = req.body\n\n    this.bp.logger.info('body: ', body)\n\n    res.status(200).send('EVENT_RECEIVED')\n\n    const fromNumber = body.To.replace('whatsapp:', '')\n    const toNumber = body.From.replace('whatsapp:', '')\n\n    const bot = _.find<MountedBot>(this.mountedBots, { fromNumber })\n\n    if (!bot) {\n      debugMessages('could not find a bot for from number =', fromNumber)\n      return\n    }\n\n    // if (!message) {\n    //   debugMessages('incoming event without messaging entry')\n    //   return\n    // }\n\n    if (undefined != body.Latitude) {\n      this.bp.logger.info('location')\n      await this._sendEvent(bot.botId, toNumber, { text: body.Latitude + ',' + body.Longitude }, { type: 'location' })\n    } else if ('' != body.Body) {\n      this.bp.logger.info('message')\n      await this._sendEvent(bot.botId, toNumber, { text: body.Body }, { type: 'message' })\n    }\n\n    // await this._sendEvent(bot.botId, toNumber, body, { type: 'message' })\n  }\n\n  private async _sendEvent(botId: string, senderId: string, message, args: { type: string }) {\n    await this.bp.events.sendEvent(\n      this.bp.IO.Event({\n        botId,\n        channel: 'twilio',\n        direction: 'incoming',\n        payload: message,\n        preview: message.text,\n        target: senderId,\n        ...args\n      })\n    )\n  }\n\n  // private async _setupWebhook(req, res) {\n  //   this.bp.logger.info('req: ', req)\n  //   this.bp.logger.info('res: ', res)\n\n  //   const mode = req.query['hub.mode']\n  //   const token = req.query['hub.authToken']\n  //   const challenge = req.query['hub.challenge']\n\n  //   const config = (await this.bp.config.getModuleConfig('channel-twilio')) as Config\n\n  //   if (mode && token && mode === 'subscribe') {\n  //     this.bp.logger.debug('Webhook Verified')\n  //     res.status(200).send(challenge)\n  //   } else {\n  //     res.sendStatus(403)\n  //   }\n  // }\n\n  private async _handleOutgoingEvent(event: sdk.IO.Event, next: sdk.IO.MiddlewareNextCallback) {\n    // this.bp.logger.info('event: ', event.type)\n    this.bp.logger.info('event.type: ', event.type)\n    this.bp.logger.info('event.payload: ', event.payload)\n\n    if (event.channel !== 'twilio') {\n      return next()\n    }\n\n    const messageType = event.type === 'default' ? 'text' : event.type\n    const twilio = this.getTwilioClientByBotId(event.botId)\n\n    // if (!_.includes(outgoingTypes, messageType)) {\n    //   return next(new Error('Unsupported event type: ' + event.type))\n    // }\n\n    if (messageType === 'text' || messageType === 'carousel') {\n      await twilio.sendTextMessage(event.target, event.payload.text)\n\n      if (undefined != event.payload.quick_replies) {\n        const quick_replies = event.payload.quick_replies\n        let str = ''\n        let count = 1\n\n        for (const reply of quick_replies) {\n          // %0a\n          str += '\\n' + count + '- ' + reply.title\n          count++\n        }\n\n        await twilio.sendTextMessage(event.target, str)\n      }\n    } else if (messageType === 'location') {\n      // TODO We don't support sending files, location requests (and probably more) yet\n      // throw new Error(`Message type \"${messageType}\" not implemented yet`)\n      this.bp.logger.info('event.type: ', event.type)\n      this.bp.logger.info('event.payload.text: ', event.payload.text)\n      this.bp.logger.info('event.payload.location: ', event.payload.location)\n\n      await twilio.sendTextMessage(event.target, event.payload.text, [event.payload.location])\n    }\n\n    next(undefined, false)\n  }\n}\n\nexport class TwilioClient {\n  private config: Config\n\n  constructor(private botId: string, private bp: typeof sdk) {}\n\n  async getConfig(): Promise<Config> {\n    if (this.config) {\n      return this.config\n    }\n\n    const config = (await this.bp.config.getModuleConfigForBot('channel-twilio', this.botId)) as Config\n    if (!config) {\n      throw new Error(`Could not find channel-twilio.json config file for ${this.botId}.`)\n    }\n\n    return config\n  }\n\n  // async setupGetStarted(): Promise<void> {\n  //   const config = await this.getConfig()\n  //   if (!config.getStarted) {\n  //     return\n  //   }\n\n  //   await this.sendProfile({\n  //     get_started: {\n  //       payload: config.getStarted\n  //     }\n  //   })\n  // }\n\n  // async setupGreeting(): Promise<void> {\n  //   const config = await this.getConfig()\n  //   if (!config.greeting) {\n  //     await this.deleteProfileFields(['greeting'])\n  //     return\n  //   }\n\n  //   await this.sendProfile({\n  //     greeting: [\n  //       {\n  //         locale: 'default',\n  //         text: config.greeting\n  //       }\n  //     ]\n  //   })\n  // }\n\n  // async setupPersistentMenu(): Promise<void> {\n  //   const config = await this.getConfig()\n  //   if (!config.persistentMenu || !config.persistentMenu.length) {\n  //     await this.deleteProfileFields(['persistent_menu'])\n  //     return\n  //   }\n\n  //   await this.sendProfile({ persistent_menu: config.persistentMenu })\n  // }\n\n  // async sendAction(senderId: string, action: TwilioAction) {\n  //   const body = {\n  //     recipient: {\n  //       id: senderId\n  //     },\n  //     sender_action: action\n  //   }\n  //   debugMessages('outgoing action', { senderId, action, body })\n  //   await this._callEndpoint('/messages', body)\n  // }\n\n  async sendTextMessage(senderId: string, message: string, action?: string | string[]) {\n    const config = await this.getConfig()\n\n    this.bp.logger.info('accountSID: ', config.accountSID)\n    this.bp.logger.info('authToken: ', config.authToken)\n    this.bp.logger.info('senderId: ', senderId)\n    this.bp.logger.info('config.fromNumber: ', config.fromNumber)\n\n    const client = twilio(config.accountSID, config.authToken)\n\n    await client.messages\n      .create({\n        from: 'whatsapp:' + config.fromNumber,\n        body: message,\n        persistentAction: action,\n        to: 'whatsapp:' + senderId\n      })\n      // .then(message => this.bp.logger.info('message: ', message))\n      .catch(error => this.bp.logger.info('error: ', error))\n\n    debugMessages('outgoing text message', { senderId, message })\n    // await this._callEndpoint('/messages', body)\n  }\n\n  // async deleteProfileFields(fields: string[]) {\n  //   const endpoint = '/twilio_profile'\n  //   const config = await this.getConfig()\n  //   debugHttpOut(endpoint, fields)\n  //   await this.http.delete(endpoint, { params: { access_token: config.accessToken }, data: { fields } })\n  // }\n\n  // async sendProfile(message) {\n  //   await this._callEndpoint('/twilio_profile', message)\n  // }\n\n  // private async _callEndpoint(endpoint: string, body) {\n  //   const config = await this.getConfig()\n  //   debugHttpOut(endpoint, body)\n  //   await this.http.post(endpoint, body, { params: { access_token: config.accessToken } })\n  // }\n}\n\n// function parseTyping(typing) {\n//   if (isNaN(typing)) {\n//     return 1000\n//   }\n\n//   return Math.max(typing, 500)\n// }\n"]}